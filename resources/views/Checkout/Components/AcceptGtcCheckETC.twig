<script type="x/template" id="vue-accept-gtc-checkETC">
  <div>
    <form id="chk_AcceptLegalNotes">
      <ul class="list-unstyled margin-bottom-0">
        <li class="checkbox">
          <input class="form-check-input" type="checkbox" value="" id="gtc-accept" v-model="isChecked">
          <label class="form-check-label" for="gtc-accept" v-bind:class="{ 'error': this.showError }">
            <div class="ETC-Checkbox"><i class="material-icons w3-xxxlarge">clear</i></div>
          </label>
          {% autoescape false %}
              {% set gtcContent %}<!--
                  --><a href="{{ urls.gtc }}" target="_blank">
                      <span>{{ trans("CeresCoconut::Template.checkoutGtc") }}</span>
                  </a><!--
              -->{% endset %}
              {% set cancellationContent %}<!--
                  --><a href="{{ urls.cancellationRights }}" target="_blank">
                      <strong>{{ trans("CeresCoconut::Template.checkoutCancellationRight", {"hyphen": "&shy;"}) }}</strong>
                  </a><!--
              -->{% endset %}
              {% set policyContent %}<!--
                  --><a href="{{ urls.privacyPolicy }}" target="_blank">
                      <span>{{ trans("CeresCoconut::Template.checkoutPrivacyPolicy", {"hyphen": "&shy;"}) }}</span>
                  </a><!--
              -->{% endset %}

              {{ trans("CeresCoconut::Template.checkoutChooseOur", {"gtc": gtcContent, "cancellation": cancellationContent, "policy": policyContent}) }}
          {% endautoescape %}
        </li>
      </ul>
    </form>
  </div>
</script>


<script>
Vue.component("accept-gtc-check", {
  props: {
    template: {
      type: String,
      default: "#vue-accept-gtc-checkETC"
    },
    hideCheckbox: {
      type: Boolean
    },
    isPreselected: {
      type: Boolean
    },
    isRequired: {
      type: Boolean,
      "default": true
    },
    customText: {
      type: String,
      "default": ""
    }
  },
  data: function data() {
    return {
      isChecked: this.isPreselected
    };
  },
  computed: _objectSpread({}, Vuex.mapState({
    showError: function showError(state) {
      return state.checkout.validation.gtc.showError;
    }
  })),
  created: function created() {
    if (this.hideCheckbox) {
      this.isChecked = true;
    } else if (this.isRequired) {
      this.$store.commit("setGtcValidator", this.validate);
    }
  },
  methods: {
    validate: function validate() {
      var showError = !this.isChecked;
      this.$store.commit("setGtcShowError", showError);
    }
  },
  watch: {
    isChecked: function isChecked() {
      if (this.showError) {
        this.validate();
      }
    }
  }
});
</script>
