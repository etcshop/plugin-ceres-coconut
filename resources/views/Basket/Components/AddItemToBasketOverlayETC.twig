{% import "Ceres::PageDesign.Macros.LayoutContainer" as LayoutContainer %}

{# {{ component( "Ceres::Item.Components.ItemBundle" ) }} #}

<script type="x/template" id="vue-add-item-to-basket-overlayETC">

    <div id="add-item-to-basket-overlay" class="test1528">
        <div class="modal fade">
            <div class="modal-dialog" role="document">
                <div class="modal-content">

                    <!-- MODAL HEADER -->
                    <div class="modal-header">
                        <div class="modal-title h3 TEST1042">{{ trans("Ceres::Template.singleItemAdded") }}</div>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <span id="timerContainer"><span class="timer"></span>s</span>
                    </div>
                    <!-- ./MODAL HEADER -->

                    <!-- MODAL BODY -->
                    <div class="modal-body">
                      <div class="modal-item">
                        <div class="row is-table-row">
                            <div class="col-md-4" style="min-height: 80px;">
                                <img style="max-height: 140px;" class="img-fluid m-x-auto" :src="imageUrl" :alt="itemName"/>
                            </div>
                            <div class="col-md-8">

                                <span id="AddItemToBasketOverlay_ItemName">
                                  <strong>${ itemName }</strong>
                                </span>
                                <span id="AddItemToBasketOvrlay_ItemAmountPrice" class="text-muted">
                                  ${ latestBasketEntry.quantity } x ${ price | currency }
                                </span>

                                {# <p>
                                    <item-bundle v-if="isLastBasketEntrySet" :bundle-type="latestBasketEntry.item.variation.bundleType" :bundle-components="latestBasketEntry.item.bundleComponents"></item-bundle>
                                </p> #}

                                <p class="small" v-for="attribute in latestBasketEntry.item.attributes">
                                    <strong>${ attribute.attribute.names.name }</strong>:
                                    <span>${ attribute.value.names.name }</span>
                                </p>

                                <p class="small" v-for="property in latestBasketEntry.item.properties">
                                    <template v-if="property.property.value">
                                        <strong>${ property.property.names.name } (+ ${ latestBasketEntry.item.properties | propertySurcharge(property.property.id) | currency }):</strong>
                                        <span v-if="property.property.valueType === 'file'">
                                            <a :href="property.property.value | fileUploadPath" target="_blank">
                                                <i class="fa fa-external-link" aria-hidden="true"></i>
                                                ${ property.property.value | fileName }
                                            </a>
                                        </span>
                                        <span v-else>${ property.property.value }</span>
                                    </template>
                                </p>
                            </div>
                        </div>
                    </div>
                    <!-- ./MODAL BODY -->

                    <!-- MODAL FOOTER -->
                    <div class="modal-footer TEST1046">
                        <div class="row">
                            <div class="col-sm-8 offset-sm-2 item-confirm-special-case-close test1530">
                                <div id="content_basket_info_tobasketcontainer">
                                  <a href="{{ urls.basket }}" class="btn btn-primary btn-medium btn-m-r btn-outline-primary" id="content_basket_info_tobasketcontainer_link">
                                      <!--<i class="fa fa-shopping-cart" aria-hidden="true"></i>-->
                                      {{ trans("Ceres::Template.singleItemBasket") }}
                                  </a>
                                </div>
                                <div id="content_basket_info_or">
                                  {{ trans("CeresCoconut::Template.ETC_Or") }}
                                </diV>
                                <div id="content_basket_info_proceedcontainer" data-dismiss="modal" aria-label="Close">
                                  <a id="content_basket_info_proceedcontainer_link" data-dismiss="modal" aria-label="Close">{{ trans("CeresCoconut::Template.ETC_Weiter_einkaufen") }}</a>
                                </div>
                            </div>
                        </div>
                    </div>
                  </div>
                  <!-- ./MODAL SIDE -->
                  <div class="modal-side">
                    <div class="modal-side-header">{{ trans("CeresCoconut::Template.ETC_ArtikelIn_Warenkorb_Pay") }} </div>
                    {{ LayoutContainer.show("Ceres::Basket.ExtendOverlayButtons") }}
                  </div>

                </div>
            </div>
        </div>
    </div>

</script>

<script>
/*const ModalService = require("services/ModalService");*/
const ModalService = require("https://github.com/plentymarkets/plugin-ceres/blob/stable/resources/js/src/app/services/ModalService.js");

Vue.component("add-item-to-basket-overlay", {

    delimiters: ["${", "}"],

    props: {
        template: {
            type: String,
            default: "#vue-add-item-to-basket-overlayETC"
        },
        defaultTimeToClose: {
            type: Number,
            default: 15
        }
    },

    data()
    {
        return {
            currency: "",
            price: 0
        };
    },

    computed:
    {
        isLastBasketEntrySet: function isLastBasketEntrySet()
        {
            return Object.keys(this.latestBasketEntry.item).length !== 0;
        },

        itemName: function itemName()
        {
            if (this.isLastBasketEntrySet)
            {
                return this.$options.filters.itemName(this.latestBasketEntry.item);
            }

            return "";
        },

        imageUrl: function imageUrl()
        {
            if (this.isLastBasketEntrySet)
            {
                const images = this.$options.filters.itemImages(this.latestBasketEntry.item.images, "urlPreview");
                const img = this.$options.filters.itemImage(images);

                return img;
            }

            return "";
        },
        imageAlternativeText:function imageAlternativeText()
        {
            if (this.isLastBasketEntrySet)
            {
                const images = this.$options.filters.itemImages(this.latestBasketEntry.item.images, "urlPreview");

                return this.$options.filters.itemImageAlternativeText(images);
            }

            return "";
        },
        latestBasketEntry:function latestBasketEntry()
        {
          return vueApp.$strore.state.basket.latestEntry;
        }
    },

    watch:
    {
        latestBasketEntry:function latestBasketEntry()
        {
            if (App.config.basket.addItemToBasketConfirm === "overlay")
            {
                this.setPriceFromData();

                ModalService
                    .findModal(document.getElementById("add-item-to-basket-overlay"))
                    .setTimeout(this.defaultTimeToClose * 1000)
                    .show();
            }
        }
    },

    methods:
    {
        setPriceFromData:function setPriceFromData()
        {
            if (this.latestBasketEntry.item.prices)
            {
                this.currency = this.latestBasketEntry.item.prices.default.currency;
                const graduatedPrice = this.$options.filters.graduatedPrice(this.latestBasketEntry.item, this.latestBasketEntry.quantity);
                const propertySurcharge = this.$options.filters.propertySurchargeSum(this.latestBasketEntry.item);

                this.price = this.$options.filters.specialOffer(graduatedPrice, this.latestBasketEntry.item.prices, "price", "value") + propertySurcharge;
            }
        },

        orderParamValue:function orderParamValue(propertyId)
        {
            const orderParams = this.latestBasketEntry.orderParams;

            if (isNullOrUndefined(orderParams))
            {
                return "";
            }

            const property = this.latestBasketEntry.item.properties.find(property =>
            {
                return parseInt(property.property.id) === parseInt(propertyId);
            });

            if (isNullOrUndefined(property) || !property.property.isOderProperty)
            {
                return "";
            }

            const orderParam = orderParams.find(param =>
            {
                return parseInt(param.property.id) === parseInt(propertyId);
            });

            const orderParamValue = orderParam.property.value;

            if (property.property.valueType === "selection" && orderParamValue)
            {
                return orderParam.property.selectionValues[orderParamValue].name;
            }

            return orderParamValue;
        }
    }
});
</script>
