{{ component( "Cere::Item.Components.QuantityInput" ) }}

<script type="x/template" id="vue-add-to-basketETC">
    <div>
        <input id="VarIDforBasket" name="VarIDforBasket" type="hidden" ref="VarIDforBasket" v-model="variationId">
        <div :class="{'no-pointer-events': waiting}" class="add-to-basket-lg-container hidden-md-down" v-if="!showQuantity && useLargeScale && canBeAddedToBasket"
             v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.singleItemAddToBasket") }}" @click="addToBasket()">
            <i v-waiting-animation="waiting" class="fa fa-cart-plus fa-lg mobile-icon-right"></i>
        </div>

        <div class="add-to-basket-lg-container hidden-md-down" v-if="!showQuantity && useLargeScale && !canBeAddedToBasket"
             v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.itemShowItem") }}" @click="directToItem()">
            <i class="fa fa-arrow-right fa-lg mobile-icon-right"></i>
        </div>

        <div class="category-list-view-port" v-if="showQuantity && !useLargeScale">
            <span>
                <div class="col-xs-12 col-sm-7 col-md-12 col-lg-12 m-y-1">
                    <div class="add-to-basket-container">
                        <div class="quantity-input-container">
                            <quantity-input :value="1"
                                        @quantity-change="updateQuantity"
                                        @out-of-stock="handleButtonState"
                                        :timeout="0"
                                        :min="minimumQuantity"
                                        :max="maximumQuantity"
                                        :interval="intervalQuantity"
                                        :variation-id="variationId"
                                        template="#vue-quantity-inputETC"></quantity-input>
                        </div>

                        <button v-if="!isVariationSelected" class="btn btn-block btn-primary disabled" v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.singleItemPleaseSelectValidVariation") }}">
                            <i class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("CeresCoconut::Template.singleItemAddToBasket") }}
                        </button>
                        <button v-else-if="!buttonLockState" :disabled="waiting" class="btn btn-block btn-primary" @click="addToBasket()">
                            <i v-waiting-animation="waiting" class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("CeresCoconut::Template.singleItemAddToBasket") }}
                        </button>
                        <button v-else
                                class="btn btn-block btn-primary disabled"
                                v-tooltip
                                data-toggle="tooltip"
                                data-placement="top"
                                :title="'Ceres::Template.singleItemQuantityMax' | translate({max: item.variation.maximumOrderQuantity})">
                            <i v-waiting-animation="waiting" class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("CeresCoconut::Template.singleItemAddToBasket") }}
                        </button>
                    </div>
                </div>

            </span>
        </div>

        <div class="category-list-view-port" v-if="!showQuantity && !useLargeScale">
            <div class="btn-group" role="group" aria-label="Thumb Control">
                <button type="button" :class="{'no-pointer-events': waiting}" v-if="canBeAddedToBasket" class="btn btn-outline-primary mobile-width-button" @click="addToBasket()">
                    <i class="fa fa-cart-plus fa-lg mobile-icon-right" aria-hidden="true"></i>
                    <span class="mobile-text-only">{{ trans("CeresCoconut::Template.singleItemAddToBasket") }}</span>
                </button>
                <button type="button" v-if="!canBeAddedToBasket" class="btn btn-outline-primary mobile-width-button" @click="directToItem()">
                    <i class="fa fa-arrow-right fa-lg mobile-icon-right" aria-hidden="true"></i>
                    <span class="mobile-text-only">{{ trans("CeresCoconut::Template.itemShowItem") }}</span>
                </button>
            </div>
        </div>
    </div>

</script>

<script>

Vue.component("add-to-basket", {

    props:
    {
        template:
        {
            type: String,
            default: "#vue-add-to-basket"
        },
        itemUrl: String,
        showQuantity:
        {
            type: Boolean,
            default: false
        },
        useLargeScale:
        {
            type: Boolean,
            default: false
        },
        missingOrderProperties:
        {
            type: Array,
            default: () => []
        },
        variationId:
        {
            type: Number
        },
        isSalable:
        {
            type: Boolean,
            default: false
        },
        hasChildren:
        {
            type: Boolean,
            default: false
        },
        intervalQuantity:
        {
            type: Number,
            default: 1
        },
        minimumQuantity:
        {
            type: Number,
            default: 0
        },
        maximumQuantity:
        {
            type: Number,
            default: null
        },
        orderProperties:
        {
            type: Array,
            default: () => []
        },
        hasPrice:
        {
            type: Boolean,
            default: true
        },
        buttonSize:
        {
            type: [String, null],
            default: null,
            validator: value =>
            {
                return ["btn-sm", "", "btn-lg"].indexOf(value) !== -1;
            }
        },
        paddingClasses:
        {
            type: String,
            default: null
        },
        paddingInlineStyles:
        {
            type: String,
            default: null
        },
        isWishList:
        {
            type: String,
            default: "false"
        }
    },
    computed:
    {
        canBeAddedToBasket()
        {
            return this.isSalable &&
                !this.hasChildren &&
                !(this.minimumQuantity != 1 || this.intervalQuantity != 1) &&
                !this.requiresProperties &&
                this.hasPrice;
        },

        requiresProperties()
        {
            return App.config.item.requireOrderProperties &&
                this.orderProperties.filter(property => property.property.isShownOnItemPage).length > 0;
        },

        buttonClasses()
        {
            const classes = [];

            if (isDefined(this.buttonSize))
            {
                classes.push(this.buttonSize);
            }

            if (isDefined(this.paddingClasses))
            {
                classes.push(this.paddingClasses.split(" "));
            }

            return classes;
        },

        tooltipText()
        {
            if (this.hasAvailableVariations)
            {
                return TranslationService.translate("Ceres::Template.singleItemPleaseSelectValidVariation");
            }
            else
            {
                return TranslationService.translate("Ceres::Template.singleItemPleaseSelectNotAvailable");
            }
        },

        ...mapState({
            basketItems: state => state.basket.items,
            isBasketLoading: state => state.basket.isBasketLoading,
            isVariationSelected: state => state.variationSelect.isVariationSelected,
            hasAvailableVariations: state => state.variationSelect.variations.some(variation => variation.isSalable),
            variationOrderQuantity: state => state.item.variationOrderQuantity
        })
    },
    data()
    {
        return {
            quantity: 1,
            buttonLockState: false,
            waiting: false
        };
    },
    methods:
    {
        /**
         * Check if a given value equals to null
         *
         * @param {*}   object
         *
         * @returns {boolean}
         */
        export function isNull(object)
        {
            return object === null;
        }
        /**
         * Check if a given value is undefined
         *
         * @param {*} object
         *
         * @returns {boolean}
         */
        isUndefined(object)
        {
            // eslint-disable-next-line
            return typeof object === typeof void 0;
        }
        /**
         * Check if a given value is null or undefined
         *
         * @param {*}   object
         *
         * @returns {boolean}
         */
        isNullOrUndefined(object)
        {
            return this.isNull(object) || this.isUndefined(object);
        }
        /**
         * add an item to basket-resource
         */
        addToBasket()
        {
            if (this.missingOrderProperties.length)
            {
                this.showMissingPropertiesError();
            }

            else if (this.isSalable)
            {
                this.waiting = true;

                this.orderProperties.forEach(function(orderProperty)
                {
                    if (orderProperty.property.valueType === "float" &&
                        !this.isNullOrUndefined(orderProperty.property.value) &&
                        orderProperty.property.value.slice(-1) === App.decimalSeparator)
                    {
                        orderProperty.property.value = orderProperty.property.value.substr(0, orderProperty.property.value.length - 1);
                    }
                });

                const basketObject =
                    {
                        variationId             :   this.variationId,
                        quantity                :   this.quantity,
                        basketItemOrderParams   :   this.orderProperties
                    };

                this.$store.dispatch("addBasketItem", basketObject).then(
                    response =>
                    {
                        document.dispatchEvent(new CustomEvent("afterBasketItemAdded", { detail: basketObject }));
                        this.waiting = false;
                    },
                    error =>
                    {
                        this.waiting = false;

                        if (error.data)
                        {
                        }
                    });
            }
        },
        showMissingPropertiesError()
        {
            this.$store.commit("setVariationMarkInvalidProps", true);

            const propertyNames = this.missingOrderProperties.map(property => property.property.names.name);
            let errorMsgContent = "";

            for (const name of propertyNames)
            {
                errorMsgContent += name + "<br>";
            }
        },

        directToItem()
        {
            navigateTo(this.itemUrl);
        },

        handleButtonState(value)
        {
            this.buttonLockState = value;
        },

        /**
         * update the property quantity of the current instance
         * @param value
         */
        updateQuantity(value)
        {
            this.quantity = value;
        }
    },
    watch:
    {
        quantity(value)
        {
            this.$store.commit("setVariationOrderQuantity", value);
        },

        variationOrderQuantity(value)
        {
            if (this.quantity !== value)
            {
                this.quantity = value;
            }
        }
    }
});
</script>
