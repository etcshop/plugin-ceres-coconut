{{ component( "Ceres::Item.Components.QuantityInputETC" ) }}

<script type="x/template" id="vue-add-to-basketETC">
    <div>
        <input id="VarIDforBasket" name="VarIDforBasket" type="hidden" ref="VarIDforBasket" v-model="variationId">
        <div :class="{'no-pointer-events': waiting}" class="add-to-basket-lg-container hidden-md-down" v-if="!showQuantity && useLargeScale && canBeAddedToBasket"
             v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.singleItemAddToBasket") }}" @click="addToBasket()">
            <i v-waiting-animation="waiting" class="fa fa-cart-plus fa-lg mobile-icon-right"></i>
        </div>

        <div class="add-to-basket-lg-container hidden-md-down" v-if="!showQuantity && useLargeScale && !canBeAddedToBasket"
             v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.itemShowItem") }}" @click="directToItem()">
            <i class="fa fa-arrow-right fa-lg mobile-icon-right"></i>
        </div>

        <div class="category-list-view-port" v-if="showQuantity && !useLargeScale">
            <span>
                <div class="col-xs-12 col-sm-7 col-md-12 col-lg-8 m-y-1">
                    <div class="add-to-basket-container">
                        <div class="quantity-input-container">
                            <quantity-input :value="1"
                                        @quantity-change="updateQuantity"
                                        @out-of-stock="handleButtonState"
                                        :timeout="0"
                                        :min="minimumQuantity"
                                        :max="maximumQuantity"
                                        :interval="intervalQuantity"
                                        :variation-id="variationId"
                                        template="#vue-quantity-inputETC"></quantity-input>
                        </div>

                        <button v-if="!isVariationSelected" class="btn btn-block btn-primary disabled" v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.singleItemPleaseSelectValidVariation") }}">
                            <i class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("Ceres::Template.singleItemAddToBasket") }}
                        </button>
                        <button v-else-if="!buttonLockState" :disabled="waiting" class="btn btn-block btn-primary" @click="addToBasket()">
                            <i v-waiting-animation="waiting" class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("Ceres::Template.singleItemAddToBasket") }}
                        </button>
                        <button v-else
                                class="btn btn-block btn-primary disabled"
                                v-tooltip
                                data-toggle="tooltip"
                                data-placement="top"
                                :title="'Ceres::Template.singleItemQuantityMax' | translate({max: item.variation.maximumOrderQuantity})">
                            <i v-waiting-animation="waiting" class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("Ceres::Template.singleItemAddToBasket") }}
                        </button>
                    </div>
                </div>

            </span>
        </div>

        <div class="category-list-view-port" v-if="!showQuantity && !useLargeScale">
            <div class="btn-group" role="group" aria-label="Thumb Control">
                <button type="button" :class="{'no-pointer-events': waiting}" v-if="canBeAddedToBasket" class="btn btn-outline-primary mobile-width-button" @click="addToBasket()">
                    <i class="fa fa-cart-plus fa-lg mobile-icon-right" aria-hidden="true"></i>
                    <span class="mobile-text-only">{{ trans("Ceres::Template.singleItemAddToBasket") }}</span>
                </button>
                <button type="button" v-if="!canBeAddedToBasket" class="btn btn-outline-primary mobile-width-button" @click="directToItem()">
                    <i class="fa fa-arrow-right fa-lg mobile-icon-right" aria-hidden="true"></i>
                    <span class="mobile-text-only">{{ trans("Ceres::Template.itemShowItem") }}</span>
                </button>
            </div>
        </div>
    </div>

</script>

<script>
  /*import ExceptionMap from "exceptions/ExceptionMap";*/
  import TranslationService from "services/TranslationService";
  import {navigateTo}from "services/UrlService";

  const NotificationService = require("services/NotificationService");

  Vue.component("add-to-basketETC", {

      delimiters: ["${", "}"],

      props:
      {
          template:
          {
              type: String,
              default: "#vue-add-to-basket"
          },
          item: Object,
          itemUrl: String,
          showQuantity:
          {
              type: Boolean,
              default: false
          },
          useLargeScale:
          {
              type: Boolean,
              default: false
          },
          missingOrderProperties:
          {
              type: Array,
              default: () => []
          },
          isVariationSelected:
          {
              type: Boolean,
              default: true
          }
      },
      computed:
      {
          hasChildren()
          {
              return this.item.filter && this.item.filter.hasChildren;
          },

          canBeAddedToBasket()
          {
              const isSalable             = this.item.filter && this.item.filter.isSalable;
              const hasChildren           = this.item.filter && this.item.filter.hasChildren;
              const intervalQuantity      = this.item.variation.intervalOrderQuantity || 1;
              const minimumOrderQuantity  = this.item.variation.minimumOrderQuantity || intervalQuantity;
              const requiresProperties    = !this.requiresProperties;

              return isSalable && !hasChildren && minimumOrderQuantity === intervalQuantity && requiresProperties;
          },

          variationId()
          {
              return this.item.variation.id;
          },

          requiresProperties()
          {
              if (App.config.item.requireOrderProperties && this.item.properties)
              {
                  const availableProperties = this.item.properties.filter(property => property.property.isShownOnItemPage);

                  return !!availableProperties.length;
              }

              return false;
          },

          ...Vuex.mapState({
              isBasketLoading: state => state.basket.isBasketLoading
          })
      },
      data()
      {
          "";

          return {
              quantity: 1,
              buttonLockState: false,
              waiting: false
          };
      },
      created()
      {
          this.$options.template = this.template;
      },
      methods:
      {
          /**
           * add an item to basket-resource
           */
          addToBasket()
          {
              if (this.missingOrderProperties.length)
              {
                  this.showMissingPropertiesError();
              }

              else if (this.item.filter.isSalable)
              {
                  this.waiting = true;

                  const basketObject =
                      {
                          variationId             :   document.querySelector("input[name=VarIDforBasket]").value,
                          quantity                :   this.quantity,
                          basketItemOrderParams   :   this.item.properties
                      };

                  this.$store.dispatch("addBasketItem", basketObject).then(
                      response =>
                      {
                          document.dispatchEvent(new CustomEvent("afterBasketItemAdded", {detail: basketObject}));
                          this.waiting = false;
                          this.openAddToBasketOverlay(basketObject.quantity);
                      },
                      error =>
                      {
                          this.waiting = false;

                          if (error.data)
                          {
                              NotificationService.error(
                                  TranslationService.translate(
                                      "Ceres::Template.AddToBasketETC"
                                  )
                              ).closeAfter(5000);
                          }
                      });
              }
          },
          showMissingPropertiesError()
          {
              this.$store.commit("setVariationMarkInvalidProps", true);

              const propertyNames = this.missingOrderProperties.map(property => property.property.names.name);
              let errorMsgContent = "";

              for (const name of propertyNames)
              {
                  errorMsgContent += name + "<br>";
              }

              NotificationService.error(TranslationService.translate("Ceres::Template.singleItemMissingOrderPropertiesError").replace("<properties>", errorMsgContent));
          },

          directToItem()
          {
              navigateTo(this.itemUrl);
          },

          handleButtonState(value)
          {
              this.buttonLockState = value;
          },

          /**
           * open the AddItemToBasketOverlay
           */
          openAddToBasketOverlay(stashedQuantity)
          {
              const latestBasketEntry =
                  {
                      item: this.item,
                      quantity: stashedQuantity
                  };

              this.$store.commit("setLatestBasketEntry", latestBasketEntry);
          },

          /**
           * update the property quantity of the current instance
           * @param value
           */
          updateQuantity(value)
          {
              this.quantity = value;
          }
      },
      watch:
      {
          quantity(newValue, oldValue)
          {
              this.$store.commit("setVariationOrderQuantity", newValue);
          }
      }
  });
</script>
