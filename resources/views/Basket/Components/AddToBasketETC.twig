{{ component( "Ceres::Item.Components.QuantityInputETC" ) }}

<script type="x/template" id="vue-add-to-basketetc">
    <div>
        <input id="VarIDforBasket" name="VarIDforBasket" type="hidden" ref="VarIDforBasket" v-model="variationId">
        <div :class="{'no-pointer-events': waiting}" class="add-to-basket-lg-container hidden-md-down" v-if="!showQuantity && useLargeScale && canBeAddedToBasket"
             v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.singleItemAddToBasket") }}" @click="addToBasket()">
            <i v-waiting-animation="waiting" class="fa fa-cart-plus fa-lg mobile-icon-right"></i>
        </div>

        <div class="add-to-basket-lg-container hidden-md-down" v-if="!showQuantity && useLargeScale && !canBeAddedToBasket"
             v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.itemShowItem") }}" @click="directToItem()">
            <i class="fa fa-arrow-right fa-lg mobile-icon-right"></i>
        </div>

        <div class="category-list-view-port" v-if="showQuantity && !useLargeScale">
            <span>
                <div class="col-xs-12 col-sm-7 col-md-12 col-lg-8 m-y-1">
                    <div class="add-to-basket-container">
                        <div class="quantity-input-container">
                            <quantity-input :value="1"
                                        @quantity-change="updateQuantity"
                                        @out-of-stock="handleButtonState"
                                        :timeout="0"
                                        :min="minimumQuantity"
                                        :max="maximumQuantity"
                                        :interval="intervalQuantity"
                                        :variation-id="variationId"
                                        template="#vue-quantity-inputETC"></quantity-input>
                        </div>

                        <button v-if="!isVariationSelected" class="btn btn-block btn-primary disabled" v-tooltip data-toggle="tooltip" data-placement="top" title="{{ trans("Ceres::Template.singleItemPleaseSelectValidVariation") }}">
                            <i class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("Ceres::Template.singleItemAddToBasket") }}
                        </button>
                        <button v-else-if="!buttonLockState" :disabled="waiting" class="btn btn-block btn-primary" @click="addToBasket()">
                            <i v-waiting-animation="waiting" class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("Ceres::Template.singleItemAddToBasket") }}
                        </button>
                        <button v-else
                                class="btn btn-block btn-primary disabled"
                                v-tooltip
                                data-toggle="tooltip"
                                data-placement="top"
                                :title="'Ceres::Template.singleItemQuantityMax' | translate({max: item.variation.maximumOrderQuantity})">
                            <i v-waiting-animation="waiting" class="fa fa-shopping-cart" aria-hidden="true"></i>
                            {{ trans("Ceres::Template.singleItemAddToBasket") }}
                        </button>
                    </div>
                </div>

            </span>
        </div>

        <div class="category-list-view-port" v-if="!showQuantity && !useLargeScale">
            <div class="btn-group" role="group" aria-label="Thumb Control">
                <button type="button" :class="{'no-pointer-events': waiting}" v-if="canBeAddedToBasket" class="btn btn-outline-primary mobile-width-button" @click="addToBasket()">
                    <i class="fa fa-cart-plus fa-lg mobile-icon-right" aria-hidden="true"></i>
                    <span class="mobile-text-only">{{ trans("Ceres::Template.singleItemAddToBasket") }}</span>
                </button>
                <button type="button" v-if="!canBeAddedToBasket" class="btn btn-outline-primary mobile-width-button" @click="directToItem()">
                    <i class="fa fa-arrow-right fa-lg mobile-icon-right" aria-hidden="true"></i>
                    <span class="mobile-text-only">{{ trans("Ceres::Template.itemShowItem") }}</span>
                </button>
            </div>
        </div>
    </div>

</script>

<script>
Vue.component("add-to-basketetc", {
    delimiters: ["${", "}"],

    props:
    {
        template:
        {
            type: String,
            default: "#vue-add-to-basketETC"
        },
        itemUrl: String,
        showQuantity:
        {
            type: Boolean,
            default: false
        },
        useLargeScale:
        {
            type: Boolean,
            default: false
        },
        missingOrderProperties:
        {
            type: Array,
            default: () => []
        },
        isVariationSelected:
        {
            type: Boolean,
            default: true
        },

        variationId:
        {
            type: Number
        },
        isSalable:
        {
            type: Boolean,
            default: false
        },
        hasChildren:
        {
            type: Boolean,
            default: false
        },
        intervalQuantity:
        {
            type: Number,
            default: 1
        },
        minimumQuantity:
        {
            type: Number,
            default: 0
        },
        maximumQuantity:
        {
            type: Number,
            default: null
        },
        orderProperties:
        {
            type: Array,
            default: () => []
        },
        hasPrice:
        {
            type: Boolean,
            default: true
        }
    },
    computed:
    {
        computedMinimumQuantity()
        {
            return this.minimumQuantity <= 0 ? this.intervalQuantity : this.minimumQuantity;
        },
        canBeAddedToBasket()
        {
            return this.isSalable &&
                !this.hasChildren &&
                (this.computedMinimumQuantity === this.intervalQuantity || this.intervalQuantity === 0) &&
                !this.requiresProperties &&
                this.hasPrice;
        },

        requiresProperties()
        {
            return App.config.item.requireOrderProperties &&
                this.orderProperties.filter(property => property.property.isShownOnItemPage).length > 0;
        },

        ...Vuex.mapState({
            isBasketLoading: state => state.basket.isBasketLoading
        })
    },
    data()
    {
        return {
            quantity: 1,
            buttonLockState: false,
            waiting: false
        };
    },
    methods:
    {
        /**
         * add an item to basket-resource
         */
        addToBasket()
        {
            if (this.missingOrderProperties.length)
            {
                this.showMissingPropertiesError();
            }

            else if (this.isSalable)
            {
                this.waiting = true;

                this.orderProperties.forEach(function(orderProperty)
{
                    if (orderProperty.property.valueType === "float" &&
                        (!(typeof orderProperty.property.value === typeof void 0) && orderProperty.property.value != null 0 &&
                        orderProperty.property.value.slice(-1) === App.decimalSeparator)
                    {
                        orderProperty.property.value = orderProperty.property.value.substr(0, orderProperty.property.value.length - 1);
                    }
                });

                const basketObject =
                    {
                        variationId             :   document.querySelector("input[name=VarIDforBasket]").value,
                        quantity                :   this.quantity,
                        basketItemOrderParams   :   this.orderProperties
                    };

                this.$store.dispatch("addBasketItem", basketObject).then(
                    response =>
                    {
                        const basketItem = response.find(item => item.variationId === this.variationId);
                        const variation = (!(typeof basketItem === typeof void 0) && !(basketItem != null)) ? basketItem.variation.data : null;
                        const orderParams = (!(typeof basketObject === typeof void 0) && !(basketObject != null)) ? basketObject.basketItemOrderParams : null;

                        document.dispatchEvent(new CustomEvent("afterBasketItemAdded", { detail: basketObject }));
                        this.waiting = false;
                        this.openAddToBasketOverlay(basketObject.quantity, variation, orderParams);
                    },
                    error =>
                    {
                        this.waiting = false;

                        if (error.data)
                        {
                        //    NotificationService.error(
                        //            "Ceres::Template.AddToBasketETC"
                        //    ).closeAfter(5000);
                        }
                    });
            }
        },
        showMissingPropertiesError()
        {
            this.$store.commit("setVariationMarkInvalidProps", true);

            const propertyNames = this.missingOrderProperties.map(property => property.property.names.name);
            let errorMsgContent = "";

            for (const name of propertyNames)
            {
                errorMsgContent += name + "<br>";
            }

            //NotificationService.error("Ceres::Template.singleItemMissingOrderPropertiesError").replace("<properties>", errorMsgContent);
        },

        directToItem()
        {
        },

        handleButtonState(value)
        {
            this.buttonLockState = value;
        },

        /**
         * open the AddItemToBasketOverlay
         */
        openAddToBasketOverlay(stashedQuantity, item, orderParams)
        {
            const latestBasketEntry =
                {
                    item: item,
                    quantity: stashedQuantity,
                    orderParams: orderParams
                };

            this.$store.commit("setLatestBasketEntry", latestBasketEntry);
        },

        /**
         * update the property quantity of the current instance
         * @param value
         */
        updateQuantity(value)
        {
            this.quantity = value;
        }
    },
    watch:
    {
        quantity(newValue, oldValue)
        {
            this.$store.commit("setVariationOrderQuantity", newValue);
        }
    }
});

</script>
