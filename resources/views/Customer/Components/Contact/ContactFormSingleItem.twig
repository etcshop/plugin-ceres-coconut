{% set mailRegex		= "[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?" %}
{% set gCapture 		= config("Ceres.global.google_recaptcha_api_key") %}
{% set contactConfigSet = not config("Ceres.contact.show_data") is empty or config("Ceres.contact.show_data") == "all" %}
{% set googleApiKey 	= config("Ceres.contact.api_key") %}
{% set zip				= config("system.company.zip") %}
{% set street 			= config("system.company.street") %}
{% set mapZoom 			= config("Ceres.contact.map_zoom") %}
{% set showMapInMobile	= config("Ceres.contact.map_show_in_mobile") %}

<script type="x/template" id="vue-contact-form-single-item">

	{{ component("CeresCoconut::Customer.Components.Contact.AcceptPrivacyPolicyCheck") }}
	{{ component("Ceres::Customer.Components.Contact.ContactMap") }}

	<div class="container_centered">
		<div class="ContentPage SingleItemContact" id="ContentKontakt">
			<div class="ContentCaption col-xs-12">{{ trans("Ceres::Template.contact") }}</div>
			<span class="ContentText col-xs-12">
				{{ trans("CeresCoconut::Template.contactShopMessageSingleItem") | raw }}
			</span>
			<br>
			<div id="ContentKontakt_form">
				<div class="row test0021">
					<div class="col-xs-12 p-x-0 {% if contactConfigSet and not googleApiKey %}col-sm-12 col-md-8 col-lg-9 {% endif %}well well-sm">
						<form id="contact-form" class="col-xs-12 p-x-0">

							<div class="col-xs-12 col-md-12 col-lg-9 m-y-0 p-x-0">
								<div class="input-unit input-name-field">
									<input type="name" name="name" v-model="name" id="txt_name">
									<label for="txt_name">{{ trans("Ceres::Template.contactName") }} </label>
								</div>
							</div>
							<div class="col-xs-12 col-md-12 col-lg-9 m-y-0 p-x-0">
								<div class="input-unit input-mail-field" data-validate="regex" data-model="userMail">
									{% set uid_mail = uid() %}
									<input type="email" name="email" v-model="userMail" id="{{ uid_mail }}" data-validate-ref="{{ mailRegex }}">
									<label for="{{ uid_mail }}">{{ trans("Ceres::Template.contactMail") }}*</label>
								</div>
								<div class="error-feedback">{{ trans("Ceres::Template.contactEnterConfirmEmail") }}</div>
							</div>
							<div class="col-xs-12 col-md-12 col-lg-9 m-y-0 p-x-0" id="ContactBetreff">
								<div class="input-unit" data-validate="text" data-model="subject">
									<input type="subject" name="subject" v-model="subject" id="txt_subject" value="FORMULAR Kontakt http://www.etc-shop.de">
									<label for="txt_subject">{{ trans("Ceres::Template.contactSubject") }}*</label>
								</div>
								<div class="error-feedback">{{ trans("Ceres::Template.contactEditSubject") }}</div>
							</div>
							<div class="col-xs-12 col-md-12 col-lg-9 m-y-0 p-x-0" id="ContactOrderID">
								<div class="input-unit Test1538">
									<input type="order" name="order" v-model="orderId" id="txt_order" value="{{ gCapture }}">
									<label for="txt_order">{{ trans("CeresCoconut::Template.basketItemNumber") }}</label>
								</div>
							</div>

							<div class="col-xs-12 col-md-12 col-lg-9 m-y-0 p-x-0">
								<div class="input-unit textarea" data-validate="text" data-model="message">
									<label for="txt_message">{{ trans('Ceres::Template.contactMessage') }}*</label>
									<textarea name="message" id="txt_message" v-model="message" class="no-resize" rows="15" cols="25"></textarea>
								</div>
								<div class="error-feedback">{{ trans("Ceres::Template.contactEditMessage") }}</div>
							</div>

							<div class="col-xs-12 col-md-12 col-lg-9 m-y-0 p-x-0 text-sm-right">* {{ trans("Ceres::Template.contactRequiredField") }}</div>
						</form>
					</div>

					<div class="col-xs-12 col-md-12 re-captcha-container">
	          {% if gCapture | length > 0 %}
							<div id="recaptcha" class="g-recaptcha"
								 data-sitekey="{{ gCapture }}"
								 data-callback="sendMail"
								 data-size="invisible"
								 data-badge="bottomleft">
							</div>
	          {% endif %}
					</div>

					<div class="col-xs-12 col-md-6 col-lg-9 m-y-0 p-x-0" id="ContactMailToMe">
						<input class="mailToMe" id="cc" type="checkbox" v-model="cc" value="cc" name="mailToMe">
						<label for="cc">
							<div class="ETC-Checkbox"><i class="material-icons w3-xxxlarge">clear</i></div>
							{{ trans("Ceres::Template.contactSendMeACopy") }}
						</label>
					</div>

					<div class="col-xs-12 col-md-6 col-lg-9 m-y-0 p-x-0">
						<hr>
					</div>

					<div class="col-xs-12 col-md-6 col-lg-9 p-x-0">
						<accept-privacy-policy-check template="#vue-accept-privacy-policy-checkETC" class="m-b-1" v-if="enableConfirmingPrivacyPolicy" v-model="privacyPolicyAccepted" @input="privacyPolicyValueChanged($event)" :show-error="privacyPolicyShowError"></accept-privacy-policy-check>
					</div>

					<div class="col-xs-12 col-md-6 col-lg-9 m-y-0 p-x-0 send-mail">
						<button type="submit" class="btn btn-primary btn-block" :disabled="waiting" @click="validate({{ gCapture | length > 0 }})">
							<i v-waiting-animation="waiting" class="fa fa-paper-plane-o" aria-hidden="true"></i>
							{{ trans("CeresCoconut::Template.contactSend") }}
						</button>
					</div>

	        {% if googleApiKey and not contactConfigSet %}
						<div class="col-xs-12 m-t-3{% if showMapInMobile == "false" %} hidden-sm-down{% endif %}">
							<contact-map template="#vue-contact-map" zip="{{ zip }}" street="{{ street }}" map-zoom="{{ mapZoom }}" google-api-key="{{ googleApiKey }}"></contact-map>
						</div>
	        {% endif %}

				</div>
			</div>
		</div>
	</div>


</script>


<script>
	import { isNullOrUndefined } from "../../helper/utils";

	const ApiService = require("services/ApiService");
	const NotificationService = require("services/NotificationService");

	import ValidationService from "services/ValidationService";
	import TranslationService from "services/TranslationService";

	Vue.component("contact-form", {

	    props: [
	        "template"
	    ],

	    data()
	    {
	        return {
	            name                  : "",
	            userMail              : "",
	            subject               : "",
	            message               : "",
	            orderId               : "",
	            cc                    : false,
	            waiting               : false,
	            privacyPolicyAccepted : false,
	            privacyPolicyShowError: false,
	            enableConfirmingPrivacyPolicy: App.config.contact.enableConfirmingPrivacyPolicy
	        };
	    },

	    created()
	    {
	        window.sendMail = this.sendMail;
	    },

	    methods:
	    {
	        validate(useCapture)
	        {
	            ValidationService.validate($("#contact-form"))
	                .done(() =>
	                {
	                    if (!this.enableConfirmingPrivacyPolicy || this.privacyPolicyAccepted)
	                    {
	                        if (useCapture)
	                        {
	                            window.grecaptcha.execute();
	                        }
	                        else
	                        {
	                            this.sendMail();
	                        }
	                    }
	                    else
	                    {
	                        this.privacyPolicyShowError = true;

	                        NotificationService.error(
	                            TranslationService.translate("Ceres::Template.contactAcceptFormPrivacyPolicy", { hyphen: "&shy;" })
	                        );
	                    }
	                })
	                .fail(invalidFields =>
	                {
	                    ValidationService.markInvalidFields(invalidFields, "error");

	                    if (this.enableConfirmingPrivacyPolicy && !this.privacyPolicyAccepted)
	                    {
	                        this.privacyPolicyShowError = true;

	                        NotificationService.error(
	                            TranslationService.translate("Ceres::Template.contactAcceptFormPrivacyPolicy", { hyphen: "&shy;" })
	                        );
	                    }

	                    const invalidFieldNames = [];

	                    for (const invalidField of invalidFields)
	                    {

	                        let invalidFieldName = invalidField.lastElementChild.innerHTML;

	                        invalidFieldName = invalidFieldName.slice(-1) === "*" ? invalidFieldName.slice(0, invalidFieldName.length - 1) : invalidFieldName;
	                        invalidFieldNames.push(invalidFieldName);
	                    }

	                    NotificationService.error(
	                        TranslationService.translate("Ceres::Template.contactCheckFormFields", { fields: invalidFieldNames.join(", ") })
	                    );

	                });
	        },

	        sendMail(recaptchaToken = null)
	        {
	            this.waiting = true;

	            const mailObj =
	                {
	                    subject : this.subject,
	                    name    : this.name,
	                    message : this.message,
	                    orderId : this.orderId,
	                    userMail: this.userMail,
	                    cc      : this.cc
	                };

	            ApiService.post("/rest/io/customer/contact/mail", { contactData: mailObj, template: "Ceres::Customer.Components.Contact.ContactMail", recaptchaToken: recaptchaToken }, { supressNotifications: true })
	                .done(response =>
	                {
	                    this.waiting = false;
	                    this.clearFields();
	                    NotificationService.success(
	                        TranslationService.translate("Ceres::Template.contactSendSuccess")
	                    );
	                    document.dispatchEvent(new CustomEvent("onContactFormSend", { detail: mailObj }));
	                })
	                .fail(response =>
	                {
	                    this.waiting = false;

	                    if (response.validation_errors)
	                    {
	                        this._handleValidationErrors(response.validation_errors);
	                    }
	                    else
	                    {
	                        NotificationService.error(
	                            TranslationService.translate("Ceres::Template.contactSendFail")
	                        );
	                    }
	                })
	                .always(() =>
	                {
	                    if (!isNullOrUndefined(window.grecaptcha))
	                    {
	                        window.grecaptcha.reset();
	                    }
	                });
	        },

	        clearFields()
	        {
	            this.name = "";
	            this.userMail = "";
	            this.subject = "";
	            this.message = "";
	            this.orderId = "";
	            this.cc = false;
	            this.privacyPolicyAccepted = false;
	        },

	        _handleValidationErrors(validationErrors)
	        {
	            ValidationService.markFailedValidationFields($("#contact-form"), validationErrors);

	            let errorMessage = "";

	            for (const value of Object.values(validationErrors))
	            {
	                errorMessage += value + "<br>";
	            }

	            NotificationService.error(errorMessage);
	        },

	        privacyPolicyValueChanged(value)
	        {
	            this.privacyPolicyAccepted = value;

	            if (value)
	            {
	                this.privacyPolicyShowError = false;
	            }
	        }
	    }
	});
</script>
